<?xml version="1.0" encoding="utf-8"?>
<project name="dretzel" default="package" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant" xmlns:sonar="antlib:org.sonar.ant">

	<property name="project.dir" value="${basedir}" />

	<!-- Import properties file -->
	<property file="build.properties" />
	
	<!-- Import macrodefs file -->
	<import file="macrodefs.xml" />

	<!-- Default values -->
	<property name="src.dir" value="${project.dir}/src" />
	<property name="src.package.dir" value="${src.dir}/main/java" />
	<property name="test.src.dir" value="${project.dir}/src/test/java" />
	<property name="dist.dir" value="${project.dir}/dist" />
	<property name="classes.dir" value="${dist.dir}/classes" />
	<property name="test.classes.dir" value="${dist.dir}/test-classes" />
	<property name="lib.dir" value="${project.dir}/lib" />
	<property name="jar.file" value="${dist.dir}/${ant.project.name}.jar" />
	<property name="main.class.name" value="com.nemesis.dretzel.Dretzel" />
	<property name="test.reports.dir" value="${dist.dir}/test-reports" />

	<target name="init-proxy">
		<setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" />
	</target>
	
	<target name="init" depends="init-proxy, install-ivy">
		<!--
		<mkdir dir="${lib.dir}/compile" />
		<mkdir dir="${lib.dir}/test" />
		<mkdir dir="${lib.dir}/runtime" />
		<mkdir dir="${lib.dir}/javadoc" />
		<mkdir dir="${lib.dir}/sources" />
		-->
	</target>

	<target name="clean" depends="init" description="Clean distribution directory content">
		<clean dir="${dist.dir}" />
	</target>

	<target name="clean-libs" depends="init" description="Clean library directory content">
		<clean dir="${lib.dir}" />
	</target>

	<target name="clean-all" depends="clean, clean-libs" description="Clean all" />
	
	<target name="install-ivy" unless="skip.download" description="Install the ivy task jar">
		<mkdir dir="${ivy.jar.dir}"/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>
	
	<target name="install-pmd" depends="init" unless="skip.download" description="Install PMD">
		<get src="http://downloads.sourceforge.net/project/pmd/pmd/${pmd.version}/${pmd.archive}" dest="${plugins.dir}" usetimestamp="true"/>
		<unzip overwrite="false" src="${plugins.dir}/${pmd.archive}" dest="${plugins.dir}"/>
	</target>
	
	<target name="resolve-jar" depends="init-proxy" description="Get dependencies jar">
		<mkdir dir="${lib.dir}" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]"/>
	</target>
	
    <target name="init-classpath">
        <path id="compile.classpath">
            <pathelement location="target/classes"/>
            <pathelement location="target/test-classes"/>
        </path>
		<path id="runtime.classpath">
			<fileset dir="${lib.dir}/runtime" includes="*.jar" />
		</path>
		<path id="test.classpath">
			<fileset dir="${lib.dir}/test" includes="*.jar" />
		</path>
    </target>
	
	<target name="compile" depends="init, init-classpath" description="Compile">
		<compile debug="true">
			<classpath>
				<path refid="runtime.classpath" />
				<path refid="compile.classpath" />
			</classpath>
		</compile>
	</target>
	
    <target name="compile-test" depends="compile">
        <mkdir dir="target/test-classes"/>
        <javac srcdir="src/test" destdir="target/test-classes" classpathref="compile.classpath" includeantruntime="false"/>
    </target>

	<!--<target name="package" depends="init, compile, javadoc, pmd, jdepend, test, cobertura, site" description="Make package">-->
	<target name="package" depends="init, compile, javadoc, pmd, jdepend, test, site" description="Make package">
		<jar destfile="${jar.file}">
			<fileset dir="${classes.dir}" />
			<manifest>
				<attribute name="Main-Class" value="${main.class.name}" />
			</manifest>
		</jar>
		<echo message="Package ${jar.file} built" />
	</target>

	<target name="package-with-libs" depends="init, compile" description="Make package">
		<jar destfile="${jar.file}">
			<fileset dir="${classes.dir}" />
			<manifest>
				<attribute name="Main-Class" value="${main.class.name}" />
			</manifest>
			<zipgroupfileset dir="${lib.dir}/runtime">
				<include name="*.jar" />
			</zipgroupfileset>
		</jar>
		<echo message="Package ${jar.file} built" />
	</target>

	<target name="run" depends="init, compile" description="Run application">
		<java classname="${main.class.name}" fork="true">
			<classpath>
				<path path="${classes.dir}" />
				<path refid="runtime.classpath" />
			</classpath>
		</java>
	</target>

	<target name="run-package" depends="init, package-with-libs" description="Run application package">
		<java jar="${jar.file}" fork="true" />
	</target>

	<target name="test-compile" depends="init, compile" description="Compile unit tests">
		<compile src.dir="${test.src.dir}" classes.dir="${test.classes.dir}">
			<classpath>
				<path path="${classes.dir}" />
				<path refid="test.classpath" />
				<path refid="compile.classpath" />
			</classpath>
		</compile>
	</target>

	<target name="test" depends="init, test-compile" description="Run unit tests">
		<mkdir dir="${test.reports.dir}" />
		<junit printsummary="withOutAndErr" fork="yes">
			<classpath>
				<path path="${test.classes.dir}" />
				<path path="${classes.dir}" />
				<path refid="test.classpath" />
				<path refid="compile.classpath" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${test.reports.dir}">
				<fileset dir="${test.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${test.reports.dir}">
			<fileset dir="${test.reports.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${test.reports.dir}" />
		</junitreport>
	</target>

	<target name="javadoc" depends="init" description="Generate javadoc">
		<javadoc sourcepath="${src.dir}" defaultexcludes="yes" destdir="${javadoc.dir}" author="true" version="true" use="true" windowtitle="${ant.project.name} API">
			<tag name="todo" scope="all" description="To do:" />
		</javadoc>
	</target>

	<target name="install-plugins" depends="init, install-pmd, install-cobertura, install-jacoco">
		<mkdir dir="${ant.user.libs.dir}" />
		<ivy:retrieve pattern="${ant.user.libs.dir}/[artifact]-[revision].[ext]" conf="build" />
	</target>

	<target name="init-pmd" depends="install-pmd">
		<property name="pmd.dist.dir" value="${dist.dir}/pmd" />
		<path id="pmd.classpath">
		    <pathelement location="${classes.dir}"/>
		    <fileset dir="${pmd.dir}/lib">
		        <include name="*.jar"/>
		    </fileset>
		</path>
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath"/>
	</target>

	<target name="pmd" depends="init, init-pmd" description="Check code with PMD">
		<mkdir dir="${pmd.dist.dir}" />
		<pmd shortFilenames="true">
			<ruleset>java-basic</ruleset>
			<ruleset>java-basic</ruleset>
			<ruleset>java-empty</ruleset>
			<ruleset>java-codesize</ruleset>
			<ruleset>java-comments</ruleset>
			<ruleset>java-imports</ruleset>
			<ruleset>java-naming</ruleset>			
			<ruleset>java-coupling</ruleset>
			<ruleset>java-unusedcode</ruleset>
			<ruleset>java-typeresolution</ruleset>
			<ruleset>java-strictexception</ruleset>
			<ruleset>java-sunsecure</ruleset>
			<ruleset>java-controversial</ruleset>
			<ruleset>java-optimizations</ruleset>			
			<formatter type="html" toFile="${pmd.dist.dir}/pmd_report.html">
				<param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>
			</formatter>
			<formatter type="xml" toFile="${pmd.dist.dir}/pmd_report.xml">
				<param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>
			</formatter>
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>
	
	<target name="code-coverage" depends="init, cobertura" description="Run code coverage instrumentation"/>
	
	<target name="install-jacoco" depends="init" unless="skip.download">
		<get src="http://search.maven.org/remotecontent?filepath=org/jacoco/jacoco/${jacoco.version}/jacoco-${jacoco.version}.zip" dest="${plugins.dir}" usetimestamp="true"/>
		<unzip overwrite="false" src="${plugins.dir}/${jacoco.archive}" dest="${plugins.dir}"/>
	</target>
	
	<target name="init-jacoco">
		<property name="jacoco.dist.dir" value="${dist.dir}/jacoco" />
		<property name="jacoco.instrumented.classes.dir" value="${jacoco.dist.dir}/instrumented-classes" />
		<property name="jacoco.report.dir" value="${jacoco.dist.dir}/report" />
		<path id="jacoco.classpath">
		    <fileset dir="${jacoco.dir}">
		        <include name="lib/**/*.jar" />
		        <include name="cobertura/*.*" />
		    </fileset>
		</path>
		<taskdef uri="antlib:org.jacoco.ant" classpathref="jacoco.classpath" resource="org/jacoco/ant/antlib.xml" />
	</target>
	
	<target name="jacoco-instrument" depends="compile, init-jacoco">
		<jacoco:instrument destdir="${jacoco.instrumented.classes.dir}">
		    <fileset dir="${classes.dir}" includes="**/*.class"/>
		</jacoco:instrument>
	</target>
	
	<target name="jacoco-report" depends="init-jacoco">
		<jacoco:report>                    
		    <structure name="${ivy.organisation}.${ivy.module}">
				<classfiles>
					<fileset dir="${classes.dir}"/>
				</classfiles>
					<sourcefiles encoding="UTF-8">
				<fileset dir="${src.package.dir}"/>
			</sourcefiles>
		    </structure>	                        
		    <html destdir="${jacoco.report.dir}"/>	                        
		</jacoco:report>
	</target>
	
	<target name="jacoco-coverage" depends="init-classpath, init-jacoco">
		<jacoco:coverage>
		    <java classname="${main.class.name}" fork="true">
				<classpath>
					<path refid="compile.classpath" />
					<path refid="runtime.classpath" />
				</classpath>
		    </java>
		</jacoco:coverage>
	</target>
	
	<target name="jacoco-coverage-test" depends="init-jacoco">
		<jacoco:coverage>
		    <junit fork="true" forkmode="once">
		        <test name="org.jacoco.examples.HelloJaCoCoTest"/>
		        <classpath>
		            <pathelement location="./bin"/>
		        </classpath>
		    </junit>
		</jacoco:coverage>
	</target>
		
	<target name="jacoco" depends="init, init-classpath, jacoco-instrument" />
	
	<target name="install-cobertura" depends="init" unless="skip.download">
		<get src="http://sourceforge.net/projects/cobertura/files/cobertura/${cobertura.version}/${cobertura.archive}" dest="${plugins.dir}" usetimestamp="true"/>
		<unzip overwrite="false" src="${plugins.dir}/${cobertura.archive}" dest="${plugins.dir}"/>
	</target>

	<target name="init-cobertura" depends="install-cobertura">				
		<property name="cobertura.dist.dir" value="${dist.dir}/cobertura" />
		<property name="cobertura.instrumented.classes.dir" value="${cobertura.dist.dir}/instrumented-classes" />
		<property name="cobertura.data.file" value="${cobertura.dist.dir}/cobertura.ser" />
		<property name="cobertura.test.reports.dir" value="${cobertura.dist.dir}/test-reports" />
		<property name="cobertura.report.dir" value="${cobertura.dist.dir}/report" />
		<property name="cobertura.report.file" value="${cobertura.report.dir}/coverage.xml" />
		<property name="debug.classes.dir" value="${cobertura.dist.dir}/classes" />
		<property name="debug.test.classes.dir" value="${cobertura.dist.dir}/test-classes" />
		<mkdir dir="${cobertura.dist.dir}" />
		<mkdir dir="${cobertura.instrumented.classes.dir}" />
		<mkdir dir="${cobertura.test.reports.dir}" />
		<mkdir dir="${cobertura.report.dir}" />
		<mkdir dir="${debug.classes.dir}" />
		<mkdir dir="${debug.test.classes.dir}" />		
		<path id="cobertura.classpath">
		    <fileset dir="${cobertura.dir}">
		        <include name="cobertura-${cobertura.version}.jar" />
		        <include name="lib/**/*.jar" />
		    </fileset>
		</path>
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	</target>
		
	<target name="cobertura-instrument" depends="compile, init-cobertura">	
		<delete file="${cobertura.data.file}" />	
		<cobertura-instrument todir="${cobertura.instrumented.classes.dir}" datafile="${cobertura.data.file}">
		    <ignore regex="org.apache.log4j.*" />
		    <includeclasses regex=".*" />
		    <excludeclasses regex=".*\.Test.*" />
			<fileset dir="${classes.dir}">
		        <include name="**/*.class" />
		        <exclude name="**/*Test.class" />
			</fileset>
			<instrumentationClasspath>
				<path refid="compile.classpath" />
			</instrumentationClasspath>
			<auxClasspath>
				<path refid="runtime.classpath" />
			</auxClasspath>
		</cobertura-instrument>		
	</target>
	
	<target name="cobertura-instrument-test" depends="init-cobertura, compile-test">	
		<echo>Cobertura instrument test</echo>
	</target>
	
	<!--
	<target name="cobertura-test" depends="init, init-cobertura, cobertura-instrument, cobertura-compile-test">
		<junit fork="yes" printsummary="true">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.file}" />
			<classpath>
				<path location="${cobertura.instrumented.classes.dir}" />
				<path location="${debug.test.classes.dir}" />
				<path location="${debug.classes.dir}" />
				<path refid="test.classpath" />
				<path refid="compile.classpath" />
				<path path="${java.class.path}" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${cobertura.test.reports.dir}">
				<fileset dir="${test.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	-->
	
	<target name="cobertura-report" depends="init">
		<cobertura-report datafile="${cobertura.data.file}" format="xml" destdir="${cobertura.report.dir}" srcdir="${src.dir}" />
		<echo>Cobertura reports built : ${cobertura.report.file}</echo>
	</target>
	
	<target name="cobertura" depends="init, init-classpath, cobertura-instrument, cobertura-instrument-test, cobertura-report" />

	<target name="init-jdepend" depends="init">
		<property name="jdepend.dist.dir" value="${dist.dir}/jdepend" />
	</target>

	<target name="jdepend" depends="init, init-jdepend, compile" description="Check code with JDepend">
		<mkdir dir="${jdepend.dist.dir}" />
		<jdepend outputfile="${jdepend.dist.dir}/jdepend-report.xml" format="xml">
			<exclude name="java.*" />
			<exclude name="javax.*" />
			<classespath>
				<pathelement location="${classes.dir}" />
			</classespath>
		</jdepend>
	</target>
	
	<target name="init-site" depends="init">
		<property name="site.dist.dir" value="${dist.dir}/site" />
		<taskdef name="site" classname="fr.valtechtraining.ant.tasks.SiteTask" />
	</target>

	<target name="site" depends="init, init-site">
		<mkdir dir="${dist.dir}" />
		<site distDir="${dist.dir}" htmlTemplate="${project.dir}/site-template.html" />
	</target>
	
	 <manifest file="MANIFEST.MF">
		<attribute name="Built-By" value="${manifest.built.by}"/>
		<attribute name="Created-By" value="${manifest.created.by}"/>
		<attribute name="Main-Class" value="${manifest.main.class}"/>
		<attribute name="Implementation-Version" value="${version.number}-b${build.number}"/>   
		<attribute name="Built-Date" value="${TODAY}"/>
		<attribute name="Class-Path" value="${mf.classpath}" />
	</manifest>

	<target name="init-sonar" depends="init">
		<property name="sonar.dist.dir" value="${dist.dir}/sonar" />
		<property name="sonar.host.url" value="http://localhost:9000"/>
		<property name="sonar.sources" value="${src.dir}" />
		<property name="sonar.tests" value="${test.src.dir}" />
		<property name="sonar.dynamicAnalysis" value="reuseReports" />
		<property name="sonar.surefire.reportsPath" value="${cobertura.test.reports.dir}" />
		<property name="sonar.cobertura.reportPath" value="${cobertura.report.file}" />
		<property name="sonar.key" value="${ivy.organisation}:${ivy.module}" />
		<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml" />
		<mkdir dir="${sonar.dist.dir}" />
	</target>

	<target name="sonar" depends="init, init-sonar, compile">
		<sonar:sonar key="${sonar.key}" version="1.0-SNAPSHOT" />
	</target>

</project>
